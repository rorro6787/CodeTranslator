
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\005\000\002\004\007\000\002" +
    "\004\011\000\002\004\007\000\002\027\002\000\002\030" +
    "\002\000\002\005\012\000\002\006\004\000\002\006\002" +
    "\000\002\031\002\000\002\032\002\000\002\011\011\000" +
    "\002\033\002\000\002\011\012\000\002\034\002\000\002" +
    "\035\002\000\002\036\002\000\002\037\002\000\002\012" +
    "\017\000\002\013\003\000\002\013\002\000\002\040\002" +
    "\000\002\010\005\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\006\000\002\010" +
    "\003\000\002\041\002\000\002\010\007\000\002\010\005" +
    "\000\002\010\003\000\002\010\010\000\002\010\006\000" +
    "\002\010\007\000\002\010\005\000\002\025\005\000\002" +
    "\025\003\000\002\042\002\000\002\043\002\000\002\020" +
    "\011\000\002\024\005\000\002\024\002\000\002\021\004" +
    "\000\002\021\006\000\002\021\002\000\002\044\002\000" +
    "\002\022\007\000\002\022\002\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\002\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\007\005\000\002\007\003\000\002\007" +
    "\003\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\004\000\002\045\002\000\002\007\006\000\002" +
    "\046\002\000\002\007\006\000\002\047\002\000\002\007" +
    "\006\000\002\050\002\000\002\007\006\000\002\051\002" +
    "\000\002\007\007\000\002\052\002\000\002\007\007\000" +
    "\002\053\002\000\002\007\014\000\002\054\002\000\002" +
    "\007\014\000\002\026\004\000\002\026\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\054\004\017\006\021\007\012\010\034\011" +
    "\026\033\004\040\020\044\023\052\042\053\031\054\027" +
    "\055\040\056\032\057\011\060\010\061\025\062\013\063" +
    "\024\064\014\065\022\067\007\001\002\000\024\033\004" +
    "\040\020\052\042\053\031\054\027\055\040\056\032\057" +
    "\011\064\014\001\002\000\024\033\uffe2\040\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\064\uffe2\001" +
    "\002\000\004\052\303\001\002\000\024\033\004\040\020" +
    "\052\042\053\031\054\027\055\040\056\032\057\011\064" +
    "\014\001\002\000\004\052\uffc2\001\002\000\050\012\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\041\uffb6\043\uffb6\045\uffb6\046\uffb6\047\uffb6\001\002\000" +
    "\004\040\uffee\001\002\000\004\052\uffc0\001\002\000\050" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\041\uffb4\043\uffb4\045\uffb4\046\uffb4\047\uffb4\001" +
    "\002\000\062\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\033\ufffa\040\ufffa\044\ufffa\045\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\067\ufffa\001" +
    "\002\000\014\032\051\033\052\034\054\035\053\046\272" +
    "\001\002\000\004\040\261\001\002\000\034\033\004\040" +
    "\020\052\042\053\031\054\121\055\040\056\032\057\011" +
    "\060\113\061\120\062\114\064\014\065\117\001\002\000" +
    "\054\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\033\uffeb" +
    "\040\uffeb\044\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb" +
    "\065\uffeb\067\uffeb\001\002\000\004\052\uffbe\001\002\000" +
    "\054\004\017\006\021\007\012\010\034\011\026\033\004" +
    "\040\020\044\023\052\042\053\031\054\027\055\040\056" +
    "\032\057\011\060\010\061\025\062\013\063\024\064\014" +
    "\065\022\067\007\001\002\000\004\052\uffbf\001\002\000" +
    "\004\052\uffc1\001\002\000\004\040\233\001\002\000\050" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\041\uffb8\043\uffb8\045\uffb8\046\uffb8\047\uffb8\001" +
    "\002\000\062\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\033\ufffb\040\ufffb\044\ufffb\045\ufffb\052" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\067\ufffb\001" +
    "\002\000\052\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\037\226\041\uffd8\043\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\001\002\000\050\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\041\uffb5\043" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\001\002\000\062\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\033" +
    "\ufffc\040\ufffc\044\ufffc\045\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\067\ufffc\001\002\000\004\040\uffe9" +
    "\001\002\000\050\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\041\uffe0\043\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\001\002\000\004\046\075\001\002\000\056" +
    "\002\073\004\017\006\021\007\012\010\034\011\026\033" +
    "\004\040\020\044\023\052\042\053\031\054\027\055\040" +
    "\056\032\057\011\060\010\061\025\062\013\063\024\064" +
    "\014\065\022\067\007\001\002\000\050\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\041\uffb7" +
    "\043\uffb7\045\uffb7\046\uffb7\047\uffb7\001\002\000\062\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\033\ufff9\040\ufff9\044\ufff9\045\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\064\ufff9\065\ufff9\067\ufff9\001\002\000\056\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\037\045\041\uffd4\042\046\043\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\044\001\002\000\060\002\uffff\004\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\033\uffff\040\uffff\044\uffff" +
    "\045\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057" +
    "\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\065\uffff" +
    "\067\uffff\001\002\000\004\051\072\001\002\000\026\033" +
    "\004\040\020\044\063\052\042\053\031\054\027\055\040" +
    "\056\032\057\011\064\014\001\002\000\024\033\004\040" +
    "\020\052\042\053\031\054\027\055\040\056\032\057\011" +
    "\064\014\001\002\000\014\032\051\033\052\034\054\035" +
    "\053\043\050\001\002\000\052\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037\061\041\uffd2" +
    "\043\uffd2\045\uffd2\046\uffd2\047\uffd2\001\002\000\024\033" +
    "\004\040\020\052\042\053\031\054\027\055\040\056\032" +
    "\057\011\064\014\001\002\000\024\033\004\040\020\052" +
    "\042\053\031\054\027\055\040\056\032\057\011\064\014" +
    "\001\002\000\024\033\004\040\020\052\042\053\031\054" +
    "\027\055\040\056\032\057\011\064\014\001\002\000\024" +
    "\033\004\040\020\052\042\053\031\054\027\055\040\056" +
    "\032\057\011\064\014\001\002\000\050\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\041\uffdd" +
    "\043\uffdd\045\uffdd\046\uffdd\047\uffdd\001\002\000\050\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\041\uffdc\043\uffdc\045\uffdc\046\uffdc\047\uffdc\001\002" +
    "\000\050\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\032\uffde\033\uffde" +
    "\034\054\035\053\041\uffde\043\uffde\045\uffde\046\uffde\047" +
    "\uffde\001\002\000\050\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\032" +
    "\uffdf\033\uffdf\034\054\035\053\041\uffdf\043\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\001\002\000\024\033\004\040\020\052" +
    "\042\053\031\054\027\055\040\056\032\057\011\064\014" +
    "\001\002\000\050\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\032\051" +
    "\033\052\034\054\035\053\041\uffd3\043\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\001\002\000\024\033\004\040\020\052\042" +
    "\053\031\054\027\055\040\056\032\057\011\064\014\001" +
    "\002\000\050\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\032\051\033" +
    "\052\034\054\035\053\041\uffd5\043\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\001\002\000\016\032\051\033\052\034\054\035" +
    "\053\045\uffce\047\070\001\002\000\004\045\067\001\002" +
    "\000\050\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\041\uffd1\043\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\001\002\000\024\033\004\040\020\052\042\053\031" +
    "\054\027\055\040\056\032\057\011\064\014\001\002\000" +
    "\004\045\uffcf\001\002\000\050\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\041\uffd0\043\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\001\002\000\004\002\000\001" +
    "\002\000\060\002\001\004\001\006\001\007\001\010\001" +
    "\011\001\033\001\040\001\044\001\045\001\052\001\053" +
    "\001\054\001\055\001\056\001\057\001\060\001\061\001" +
    "\062\001\063\001\064\001\065\001\067\001\001\002\000" +
    "\062\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\033\ufffd\040\ufffd\044\ufffd\045\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\067\ufffd\001\002\000" +
    "\004\040\077\001\002\000\026\033\004\040\020\046\uffe3" +
    "\052\042\053\031\054\027\055\040\056\032\057\011\064" +
    "\014\001\002\000\016\032\051\033\052\034\054\035\053" +
    "\041\uffe4\046\uffe4\001\002\000\004\046\102\001\002\000" +
    "\034\020\uffe8\025\uffe8\026\uffe8\033\uffe8\040\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\064\uffe8\066" +
    "\uffe8\001\002\000\034\020\111\025\106\026\107\033\004" +
    "\040\112\052\042\053\031\054\027\055\040\056\032\057" +
    "\011\064\014\066\104\001\002\000\050\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\041\uffb2" +
    "\043\uffb2\045\uffb2\046\uffb2\047\uffb2\001\002\000\050\012" +
    "\144\013\147\014\150\015\145\016\146\017\143\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\032\051\033\052\034\054\035" +
    "\053\041\uffb1\043\uffb1\045\uffb1\046\uffb1\047\uffb1\001\002" +
    "\000\006\052\212\053\211\001\002\000\006\052\173\053" +
    "\172\001\002\000\014\021\126\022\130\023\127\024\125" +
    "\046\164\001\002\000\034\020\111\025\106\026\107\033" +
    "\004\040\112\052\042\053\031\054\027\055\040\056\032" +
    "\057\011\064\014\066\104\001\002\000\044\020\111\025" +
    "\106\026\107\033\004\040\112\052\042\053\031\054\121" +
    "\055\040\056\032\057\011\060\113\061\120\062\114\064" +
    "\014\065\117\066\104\001\002\000\004\041\160\001\002" +
    "\000\004\041\157\001\002\000\040\012\144\013\147\014" +
    "\150\015\145\016\146\017\143\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\032\051\033\052\034\054\035\053\041\142\001" +
    "\002\000\014\021\126\022\130\023\127\024\125\041\131" +
    "\001\002\000\004\041\124\001\002\000\004\041\123\001" +
    "\002\000\040\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\041\122\001\002\000\034\020\uffba" +
    "\025\uffba\026\uffba\033\uffba\040\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\064\uffba\066\uffba\001\002" +
    "\000\034\020\uffbd\025\uffbd\026\uffbd\033\uffbd\040\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\064\uffbd" +
    "\066\uffbd\001\002\000\034\020\uffbb\025\uffbb\026\uffbb\033" +
    "\uffbb\040\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\064\uffbb\066\uffbb\001\002\000\034\020\uffa3\025" +
    "\uffa3\026\uffa3\033\uffa3\040\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\064\uffa3\066\uffa3\001\002\000" +
    "\034\020\uffa9\025\uffa9\026\uffa9\033\uffa9\040\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\064\uffa9\066" +
    "\uffa9\001\002\000\034\020\uffa5\025\uffa5\026\uffa5\033\uffa5" +
    "\040\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\064\uffa5\066\uffa5\001\002\000\034\020\uffa7\025\uffa7" +
    "\026\uffa7\033\uffa7\040\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\064\uffa7\066\uffa7\001\002\000\050" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\041\uffab\043\uffab\045\uffab\046\uffab\047\uffab\001" +
    "\002\000\034\020\111\025\106\026\107\033\004\040\112" +
    "\052\042\053\031\054\027\055\040\056\032\057\011\064" +
    "\014\066\104\001\002\000\050\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\041\uffa6\043\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\001\002\000\034\020\111\025" +
    "\106\026\107\033\004\040\112\052\042\053\031\054\027" +
    "\055\040\056\032\057\011\064\014\066\104\001\002\000" +
    "\050\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\021\126\022\130\023\127\024\125\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\041\uffa4\043\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\001\002\000\034\020\111\025\106\026\107\033\004\040" +
    "\112\052\042\053\031\054\027\055\040\056\032\057\011" +
    "\064\014\066\104\001\002\000\050\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\041\uffa8\043" +
    "\uffa8\045\uffa8\046\uffa8\047\uffa8\001\002\000\034\020\111" +
    "\025\106\026\107\033\004\040\112\052\042\053\031\054" +
    "\027\055\040\056\032\057\011\064\014\066\104\001\002" +
    "\000\050\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\021\126\022\130\023\127\024\125\032\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\041\uffa2\043\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\001\002\000\050\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\041\uffdb\043\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\001\002\000\024\033\004\040\020\052" +
    "\042\053\031\054\027\055\040\056\032\057\011\064\014" +
    "\001\002\000\024\033\004\040\020\052\042\053\031\054" +
    "\027\055\040\056\032\057\011\064\014\001\002\000\024" +
    "\033\004\040\020\052\042\053\031\054\027\055\040\056" +
    "\032\057\011\064\014\001\002\000\024\033\004\040\020" +
    "\052\042\053\031\054\027\055\040\056\032\057\011\064" +
    "\014\001\002\000\024\033\004\040\020\052\042\053\031" +
    "\054\027\055\040\056\032\057\011\064\014\001\002\000" +
    "\024\033\004\040\020\052\042\053\031\054\027\055\040" +
    "\056\032\057\011\064\014\001\002\000\050\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\041" +
    "\uffaf\043\uffaf\045\uffaf\046\uffaf\047\uffaf\001\002\000\050" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\041\uffb0\043\uffb0\045\uffb0\046\uffb0\047\uffb0\001" +
    "\002\000\050\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\021\uffad\022\uffad\023\uffad\024\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\041\uffad\043\uffad\045\uffad\046\uffad" +
    "\047\uffad\001\002\000\050\012\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\041\uffae\043\uffae\045" +
    "\uffae\046\uffae\047\uffae\001\002\000\050\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\041\uffb3" +
    "\043\uffb3\045\uffb3\046\uffb3\047\uffb3\001\002\000\050\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\041\uffac\043\uffac\045\uffac\046\uffac\047\uffac\001\002" +
    "\000\034\020\uffbc\025\uffbc\026\uffbc\033\uffbc\040\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\064\uffbc" +
    "\066\uffbc\001\002\000\034\020\uffd7\025\uffd7\026\uffd7\033" +
    "\uffd7\040\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\064\uffd7\066\uffd7\001\002\000\034\020\111\025" +
    "\106\026\107\033\004\040\112\052\042\053\031\054\027" +
    "\055\040\056\032\057\011\064\014\066\104\001\002\000" +
    "\050\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\041\uffd6\043\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\001\002\000\050\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\041\uffaa\043\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\001\002\000\026\033\uffe7\040\uffe7\041\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\064" +
    "\uffe7\001\002\000\026\033\004\040\020\041\uffe3\052\042" +
    "\053\031\054\027\055\040\056\032\057\011\064\014\001" +
    "\002\000\004\041\167\001\002\000\054\004\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\033\uffe6\040\uffe6\044\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\067\uffe6\001" +
    "\002\000\054\004\017\006\021\007\012\010\034\011\026" +
    "\033\004\040\020\044\023\052\042\053\031\054\027\055" +
    "\040\056\032\057\011\060\010\061\025\062\013\063\024" +
    "\064\014\065\022\067\007\001\002\000\062\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\033\uffe5" +
    "\040\uffe5\044\uffe5\045\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\067\uffe5\001\002\000\004\047\206\001" +
    "\002\000\004\027\174\001\002\000\004\054\175\001\002" +
    "\000\004\030\176\001\002\000\004\054\177\001\002\000" +
    "\006\031\200\047\uff98\001\002\000\004\054\205\001\002" +
    "\000\004\047\202\001\002\000\034\020\uff9b\025\uff9b\026" +
    "\uff9b\033\uff9b\040\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\064\uff9b\066\uff9b\001\002\000\034\020" +
    "\111\025\106\026\107\033\004\040\112\052\042\053\031" +
    "\054\027\055\040\056\032\057\011\064\014\066\104\001" +
    "\002\000\050\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\021\126\022\130\023\127\024\125\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\041\uff9a\043\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\001\002\000\004\047\uff99\001\002\000\034\020" +
    "\uff9f\025\uff9f\026\uff9f\033\uff9f\040\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\057\uff9f\064\uff9f\066\uff9f\001" +
    "\002\000\034\020\111\025\106\026\107\033\004\040\112" +
    "\052\042\053\031\054\027\055\040\056\032\057\011\064" +
    "\014\066\104\001\002\000\050\012\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\021\126\022\130\023\127\024" +
    "\125\032\uff9e\033\uff9e\034\uff9e\035\uff9e\041\uff9e\043\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\001\002\000\004\047\223\001" +
    "\002\000\004\027\213\001\002\000\004\054\214\001\002" +
    "\000\004\030\215\001\002\000\004\054\216\001\002\000" +
    "\006\031\200\047\uff98\001\002\000\004\047\220\001\002" +
    "\000\034\020\uff9d\025\uff9d\026\uff9d\033\uff9d\040\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\064\uff9d" +
    "\066\uff9d\001\002\000\034\020\111\025\106\026\107\033" +
    "\004\040\112\052\042\053\031\054\027\055\040\056\032" +
    "\057\011\064\014\066\104\001\002\000\050\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\021\126\022\130" +
    "\023\127\024\125\032\uff9c\033\uff9c\034\uff9c\035\uff9c\041" +
    "\uff9c\043\uff9c\045\uff9c\046\uff9c\047\uff9c\001\002\000\034" +
    "\020\uffa1\025\uffa1\026\uffa1\033\uffa1\040\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\064\uffa1\066\uffa1" +
    "\001\002\000\034\020\111\025\106\026\107\033\004\040" +
    "\112\052\042\053\031\054\027\055\040\056\032\057\011" +
    "\064\014\066\104\001\002\000\050\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\021\126\022\130\023\127" +
    "\024\125\032\uffa0\033\uffa0\034\uffa0\035\uffa0\041\uffa0\043" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\001\002\000\034\020\uffb9" +
    "\025\uffb9\026\uffb9\033\uffb9\040\230\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\064\uffb9\066\uffb9\001\002" +
    "\000\034\020\111\025\106\026\107\033\004\040\112\052" +
    "\042\053\031\054\027\055\040\056\032\057\011\064\014" +
    "\066\104\001\002\000\012\054\231\061\120\062\114\065" +
    "\117\001\002\000\004\041\122\001\002\000\050\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021\126\022" +
    "\130\023\127\024\125\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\041\uffd9\043\uffd9\045\uffd9\046\uffd9\047\uffd9\001\002\000" +
    "\036\020\111\025\106\026\107\033\004\040\112\044\236" +
    "\052\042\053\031\054\027\055\040\056\032\057\011\064" +
    "\014\066\104\001\002\000\040\012\144\013\147\014\150" +
    "\015\145\016\146\017\143\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\032\051\033\052\034\054\035\053\041\245\001\002" +
    "\000\014\021\126\022\130\023\127\024\125\041\243\001" +
    "\002\000\024\033\004\040\020\052\042\053\031\054\027" +
    "\055\040\056\032\057\011\064\014\001\002\000\004\045" +
    "\240\001\002\000\004\041\241\001\002\000\004\046\242" +
    "\001\002\000\062\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\033\ufff5\040\ufff5\044\ufff5\045\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\067\ufff5" +
    "\001\002\000\004\046\244\001\002\000\062\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\033\ufff4" +
    "\040\ufff4\044\ufff4\045\ufff4\052\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\064\ufff4\065\ufff4\067\ufff4\001\002\000\004\046\246\001" +
    "\002\000\062\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\033\ufff6\040\ufff6\044\ufff6\045\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\067\ufff6\001" +
    "\002\000\056\004\017\006\021\007\012\010\034\011\026" +
    "\033\004\040\020\044\023\045\250\052\042\053\031\054" +
    "\027\055\040\056\032\057\011\060\010\061\025\062\013" +
    "\063\024\064\014\065\022\067\007\001\002\000\062\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\033\ufff8\040\ufff8\044\ufff8\045\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\067\ufff8\001\002\000\054\004" +
    "\017\006\021\007\012\010\034\011\026\033\004\040\020" +
    "\044\023\052\042\053\031\054\027\055\040\056\032\057" +
    "\011\060\010\061\025\062\013\063\024\064\014\065\022" +
    "\067\007\001\002\000\004\007\253\001\002\000\004\040" +
    "\254\001\002\000\034\020\111\025\106\026\107\033\004" +
    "\040\112\052\042\053\031\054\027\055\040\056\032\057" +
    "\011\064\014\066\104\001\002\000\014\021\126\022\130" +
    "\023\127\024\125\041\256\001\002\000\004\046\257\001" +
    "\002\000\062\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\033\uffea\040\uffea\044\uffea\045\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\067\uffea\001" +
    "\002\000\014\032\051\033\052\034\054\035\053\041\142" +
    "\001\002\000\034\020\111\025\106\026\107\033\004\040" +
    "\112\052\042\053\031\054\027\055\040\056\032\057\011" +
    "\064\014\066\104\001\002\000\014\021\126\022\130\023" +
    "\127\024\125\041\263\001\002\000\054\004\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\033\ufff3\040\ufff3\044\ufff3\052" +
    "\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\067\ufff3\001" +
    "\002\000\054\004\017\006\021\007\012\010\034\011\026" +
    "\033\004\040\020\044\023\052\042\053\031\054\027\055" +
    "\040\056\032\057\011\060\010\061\025\062\013\063\024" +
    "\064\014\065\022\067\007\001\002\000\062\002\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\033\ufff2" +
    "\040\ufff2\044\ufff2\045\ufff2\052\ufff2\053\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\064\ufff2\065\ufff2\067\ufff2\001\002\000\062\002\uffef\004" +
    "\uffef\005\270\006\uffef\007\uffef\010\uffef\011\uffef\033\uffef" +
    "\040\uffef\044\uffef\045\uffef\052\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef" +
    "\064\uffef\065\uffef\067\uffef\001\002\000\062\002\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\033\ufff1" +
    "\040\ufff1\044\ufff1\045\ufff1\052\ufff1\053\ufff1\054\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\067\ufff1\001\002\000\054\004\017\006" +
    "\021\007\012\010\034\011\026\033\004\040\020\044\023" +
    "\052\042\053\031\054\027\055\040\056\032\057\011\060" +
    "\010\061\025\062\013\063\024\064\014\065\022\067\007" +
    "\001\002\000\062\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\033\ufff0\040\ufff0\044\ufff0\045\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0" +
    "\001\002\000\062\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\033\ufffe\040\ufffe\044\ufffe\045\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\067\ufffe" +
    "\001\002\000\004\040\274\001\002\000\034\020\111\025" +
    "\106\026\107\033\004\040\112\052\042\053\031\054\027" +
    "\055\040\056\032\057\011\064\014\066\104\001\002\000" +
    "\014\021\126\022\130\023\127\024\125\041\276\001\002" +
    "\000\054\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\033" +
    "\uffed\040\uffed\044\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\065\uffed\067\uffed\001\002\000\054\004\017\006\021" +
    "\007\012\010\034\011\026\033\004\040\020\044\023\052" +
    "\042\053\031\054\027\055\040\056\032\057\011\060\010" +
    "\061\025\062\013\063\024\064\014\065\022\067\007\001" +
    "\002\000\062\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\033\uffec\040\uffec\044\uffec\045\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec" +
    "\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\067\uffec\001" +
    "\002\000\014\032\051\033\052\034\054\035\053\046\302" +
    "\001\002\000\062\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\033\ufff7\040\ufff7\044\ufff7\045\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\067\ufff7" +
    "\001\002\000\012\037\uffc9\042\304\046\uffc9\047\uffc9\001" +
    "\002\000\024\033\004\040\020\052\042\053\031\054\027" +
    "\055\040\056\032\057\011\064\014\001\002\000\010\037" +
    "\uffcd\046\uffcd\047\uffcd\001\002\000\010\037\310\046\uffc6" +
    "\047\uffc6\001\002\000\006\046\uffcc\047\uffcc\001\002\000" +
    "\036\020\111\025\106\026\107\033\004\040\112\044\312" +
    "\052\042\053\031\054\027\055\040\056\032\057\011\064" +
    "\014\066\104\001\002\000\016\021\126\022\130\023\127" +
    "\024\125\046\uffc8\047\uffc8\001\002\000\024\033\004\040" +
    "\020\052\042\053\031\054\027\055\040\056\032\057\011" +
    "\064\014\001\002\000\004\045\314\001\002\000\006\046" +
    "\uffc7\047\uffc7\001\002\000\006\046\uffc3\047\316\001\002" +
    "\000\004\052\320\001\002\000\004\046\uffcb\001\002\000" +
    "\010\037\uffc5\046\uffc5\047\uffc5\001\002\000\010\037\310" +
    "\046\uffc6\047\uffc6\001\002\000\006\046\uffc3\047\316\001" +
    "\002\000\004\046\uffc4\001\002\000\014\032\051\033\052" +
    "\034\054\035\053\043\325\001\002\000\010\037\uffca\046" +
    "\uffca\047\uffca\001\002\000\024\033\004\040\020\052\042" +
    "\053\031\054\027\055\040\056\032\057\011\064\014\001" +
    "\002\000\050\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\032\051\033" +
    "\052\034\054\035\053\041\uffe1\043\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\001\002\000\050\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\041\uffda\043\uffda\045" +
    "\uffda\046\uffda\047\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\030\002\036\003\042\004\032\005\027\010" +
    "\015\011\014\012\040\014\005\015\004\017\034\020\035" +
    "\001\001\000\010\010\327\015\004\017\034\001\001\000" +
    "\004\040\325\001\001\000\002\001\001\000\010\010\300" +
    "\015\004\017\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\257\015\004\017\034\001\001\000\004" +
    "\033\250\001\001\000\002\001\001\000\030\002\246\003" +
    "\042\004\032\005\027\010\015\011\014\012\040\014\005" +
    "\015\004\017\034\020\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\073\004\032\005\027\010\015\011" +
    "\014\012\040\014\005\015\004\017\034\020\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\063\015\004" +
    "\017\034\001\001\000\010\010\046\015\004\017\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\057" +
    "\015\004\017\034\001\001\000\010\010\056\015\004\017" +
    "\034\001\001\000\010\010\055\015\004\017\034\001\001" +
    "\000\010\010\054\015\004\017\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\061\015\004\017\034\001\001\000\002\001" +
    "\001\000\012\010\064\015\004\017\034\025\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\064\015\004\017\034\025\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\077\013\100\015\004\017\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\102\001\001" +
    "\000\012\007\107\010\104\015\004\017\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\162\010\104\015" +
    "\004\017\034\001\001\000\012\007\115\010\114\015\004" +
    "\017\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\137\001\001\000\004" +
    "\045\135\001\001\000\004\047\133\001\001\000\004\046" +
    "\131\001\001\000\002\001\001\000\012\007\132\010\104" +
    "\015\004\017\034\001\001\000\002\001\001\000\012\007" +
    "\134\010\104\015\004\017\034\001\001\000\002\001\001" +
    "\000\012\007\136\010\104\015\004\017\034\001\001\000" +
    "\002\001\001\000\012\007\140\010\104\015\004\017\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\155\015\004\017\034\001\001\000\010\010\154\015\004" +
    "\017\034\001\001\000\010\010\153\015\004\017\034\001" +
    "\001\000\010\010\152\015\004\017\034\001\001\000\010" +
    "\010\151\015\004\017\034\001\001\000\010\010\150\015" +
    "\004\017\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\160\001\001" +
    "\000\012\007\161\010\104\015\004\017\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\164\001\001" +
    "\000\012\010\077\013\165\015\004\017\034\001\001\000" +
    "\002\001\001\000\004\037\167\001\001\000\026\003\170" +
    "\004\032\005\027\010\015\011\014\012\040\014\005\015" +
    "\004\017\034\020\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\202\001\001\000" +
    "\012\007\203\010\104\015\004\017\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\206\001\001\000" +
    "\012\007\207\010\104\015\004\017\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\216" +
    "\001\001\000\002\001\001\000\004\053\220\001\001\000" +
    "\012\007\221\010\104\015\004\017\034\001\001\000\002" +
    "\001\001\000\004\051\223\001\001\000\012\007\224\010" +
    "\104\015\004\017\034\001\001\000\002\001\001\000\004" +
    "\015\226\001\001\000\012\007\231\010\104\015\004\017" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\234\010\233\015\004\017\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\064" +
    "\015\004\017\034\025\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\073\004\032\005\027\010\015\011\014" +
    "\012\040\014\005\015\004\017\034\020\035\001\001\000" +
    "\002\001\001\000\026\003\251\004\032\005\027\010\015" +
    "\011\014\012\040\014\005\015\004\017\034\020\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\254" +
    "\010\104\015\004\017\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\261\010\104\015\004\017\034\001\001\000\002\001" +
    "\001\000\004\027\263\001\001\000\026\003\264\004\032" +
    "\005\027\010\015\011\014\012\040\014\005\015\004\017" +
    "\034\020\035\001\001\000\004\030\265\001\001\000\004" +
    "\006\266\001\001\000\002\001\001\000\026\003\270\004" +
    "\032\005\027\010\015\011\014\012\040\014\005\015\004" +
    "\017\034\020\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\274\010\104\015\004" +
    "\017\034\001\001\000\002\001\001\000\004\032\276\001" +
    "\001\000\026\003\277\004\032\005\027\010\015\011\014" +
    "\012\040\014\005\015\004\017\034\020\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\304\001\001\000\010\010\323\015\004\017\034\001" +
    "\001\000\004\042\305\001\001\000\004\021\306\001\001" +
    "\000\004\043\314\001\001\000\012\007\310\010\104\015" +
    "\004\017\034\001\001\000\002\001\001\000\012\010\064" +
    "\015\004\017\034\025\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\320\001\001\000\004\021" +
    "\321\001\001\000\004\022\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\326\015" +
    "\004\017\034\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    gc = new Generador(); 
    tc = new TablaSimbolos();
    tcArray = new HashMap<String, Array>();
    registro = 0;
    etiqueta = 0;

    }

 
    public class Array {
      String tipo;
      String tam;
      public Array(String tipo, String tam) {
        this.tipo = tipo;
        this.tam = tam;
      }
      @Override
      public String toString() {
        return this.tipo + " " + this.tam;
      }
    }
    Generador gc; 
    private TablaSimbolos tc;
    private HashMap<String, Array> tcArray;
    public int registro;
    private int etiqueta;
    String tipoAux, variableAux;
    String cast = null;
    String dimplica, dimplica2;
    boolean asignado = false;
    String numeroAux;
    int dentroImplica = 0;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 

    public Register castImplicito(Register a, Register b) {
      Register RESULT = null;
      if(a.tipo.equals("int") && b.tipo.equals("float")) {
        RESULT = new Register("float", crearVariable());
        gc.variableCast(RESULT.ident, a.ident, "float");
      }
      else if(a.tipo.equals("float") && b.tipo.equals("int")) {
        RESULT = new Register("float", crearVariable());
        gc.variableCast(RESULT.ident, b.ident, "float");
      }
      return RESULT;
    }

    public String buscar(String ident) {
        return tc.buscar(ident);
    }

    public void insertar(String ident, String tipo) {
        tc.insertar(ident, tipo);
    }  

    public Array buscarArray(String ident) {
        return tcArray.get(ident);
    }

    public void insertarArray(String ident, String tipo, String tam) {
        Array aux = new Array(tipo, tam);
        tcArray.put(ident, aux);
    } 

    private String crearVariable() {
        return "$t" + (registro++);
    }

    private String crearEtiqueta() {
        return "L" + (etiqueta++);
    } 

    public class Register {
      String tipo;
      String ident;
      
      public Register(String tipo, String ident) {
        this.tipo = tipo;
        this.ident = ident;
      }

      @Override
      public String toString() {
        return this.tipo + " " + this.ident;
      }
    }

    public class tresEtiquetas {
        private String[] etiquetas = {null, null, null};

        public tresEtiquetas() {
            etiquetas[0] = crearEtiqueta();
            etiquetas[1] = crearEtiqueta();
        }

        public tresEtiquetas(String primeraEtiqueta, String segundaEtiqueta) {
            etiquetas[0] = primeraEtiqueta;
            etiquetas[1] = segundaEtiqueta;
        }

        public String getTrue() {
            return etiquetas[0];
        }

        public String getFalse() {
            return etiquetas[1];
        }

        public String getOut() {
            return etiquetas[2];
        }

        public void setTrue(String etiqueta) {
            etiquetas[0] = etiqueta;
        }

        public void setFalse(String etiqueta) {
            etiquetas[1] = etiqueta;
        }

        public void setOut(String etiqueta) {
            etiquetas[2] = etiqueta;
        }
    }  

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // conjSent ::= conjSent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= conjSent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // conjSent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= exp PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= declare PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= sent_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= sent_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= sent_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= AL conjSent CL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= CASTB exp PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            tresEtiquetas aux = new tresEtiquetas();
            aux.setOut(crearEtiqueta());
            gc.ifIgual("$t" + (registro-1) + "", "0", aux.getFalse());
            gc.salto(aux.getTrue());
            gc.etiqueta(aux.getTrue());
            gc.variable(a.charAt(0) + "", "1");
            gc.salto(aux.getOut());
            gc.etiqueta(aux.getFalse());
            gc.variable(a.charAt(0) + "", "0");
            gc.etiqueta(aux.getOut());
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent_print ::= PRINT AP exp CP PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                  Array aux = buscarArray(a.ident);
                  if(aux != null) {
                    int tam = Integer.parseInt(aux.tam);
                    String variable1 = crearVariable();
                    for(int i = 0; i < tam; ++i) {
                      gc.variable(variable1, a.ident + "[" + i + "]");
                      if(!aux.tipo.equals("char")) {
                        gc.print(variable1);
                      }
                      else {
                        gc.printC(variable1);
                      }
                    }
                  }
                  else {
                    if(a.tipo.equals("char")) {
                      gc.printC(a.ident);
                    }
                    else if(a.tipo.equals("string")) {
                      if(a.ident.charAt(0) == '\"') {
                        String variable1 = crearVariable();
                        String variable2 = crearVariable();
                        String variable3 = crearVariable();
                        int j = 0;
                        for(int i = 1; i < a.ident.length()-1; ++i) {
                          if(a.ident.charAt(i) == '\\') {
                            i = i + 1;
                          }
                          int letra = (int) a.ident.charAt(i);
                          gc.variable(variable1 + "[" + j + "]", "" + letra);
                          j = j + 1;
                        }
                        gc.variable("$" + variable1 + "_length", "" + j);
                        gc.variable(variable2, "0");
                        tresEtiquetas etiquetas = new tresEtiquetas();
                        gc.etiqueta(etiquetas.getTrue());
                        gc.ifMenor(variable2, "$" + variable1 + "_length", etiquetas.getFalse());
                        etiquetas.setOut(crearEtiqueta());
                        gc.salto(etiquetas.getOut()); 
                        gc.etiqueta(etiquetas.getFalse());
                        gc.variable(variable3, variable1 + "[" + variable2 + "]");
                        System.out.println("\twritec " + variable3 + ";");
                        System.out.println("\t" + variable2 + " = " + variable2 + " + 1;");
                        gc.salto(etiquetas.getTrue());
                        gc.etiqueta(etiquetas.getOut());
                        System.out.println("\twritec 10;");
                      }
                      else {
                        String variable1 = crearVariable();
                        String variable2 = crearVariable();
                        gc.variable(variable1, "0");
                        tresEtiquetas etiquetas = new tresEtiquetas();
                        gc.etiqueta(etiquetas.getTrue());
                        gc.ifMenor(variable1, "$" + a.ident + "_length", etiquetas.getFalse());
                        etiquetas.setOut(crearEtiqueta());
                        gc.salto(etiquetas.getOut()); 
                        gc.etiqueta(etiquetas.getFalse());
                        gc.variable(variable2, a.ident + "[" + variable1 + "]");
                        System.out.println("\twritec " + variable2 + ";");
                        System.out.println("\t" + variable1 + " = " + variable1 + " + 1;");
                        gc.salto(etiquetas.getTrue());
                        gc.etiqueta(etiquetas.getOut());
                        System.out.println("\twritec 10;");
                      }
                    }
                    else {
                      if(a.tipo.equals("boolean")) {
                        tresEtiquetas saltos = new tresEtiquetas();
                        saltos.setOut(crearEtiqueta());
                        gc.ifIgual("1", a.ident, saltos.getTrue());
                        gc.salto(saltos.getFalse());
                        gc.etiqueta(saltos.getTrue());
                        System.out.println("\twritec 116;\n\twritec 114;\n\twritec 117;\n\twritec 101;\n\twritec 10;");
                        gc.salto(saltos.getOut());
                        gc.etiqueta(saltos.getFalse());
                        System.out.println("\twritec 102;\n\twritec 97;\n\twritec 108;\n\twritec 115;\n\twritec 101;\n\twritec 10;");
                        gc.etiqueta(saltos.getOut());
                      }
                      else {
                        gc.print(a.ident); 
                      }
                    }
                  }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_print",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent_print ::= PRINT AP AL lista CL CP PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Register> a = (ArrayList<Register>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                  String variable1 = crearVariable();
                  String variable2 = crearVariable();
                  for(int i = 0; i < a.size(); ++i) {
                    gc.variable(variable1 + "[" + i + "]", a.get(i).ident);
                  }
                  for(int i = 0; i < a.size(); ++i) {
                    gc.variable(variable2, variable1 + "[" + i + "]");
                    if(!a.get(i).tipo.equals("char")) {
                      gc.print(variable2);
                    }
                    else {
                      gc.printC(variable2);
                    }
                  }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_print",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent_print ::= PRINT AP cond CP PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		tresEtiquetas a = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                  gc.etiqueta(a.getTrue());
                  System.out.println("\twritec 116;\n\twritec 114;\n\twritec 117;\n\twritec 101;\n\twritec 10;");
                  a.setOut(crearEtiqueta());
                  gc.salto(a.getOut());
                  gc.etiqueta(a.getFalse());
                  System.out.println("\twritec 102;\n\twritec 97;\n\twritec 108;\n\twritec 115;\n\twritec 101;\n\twritec 10;");
                  gc.etiqueta(a.getOut());
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_print",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		tresEtiquetas c = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                c.setOut(crearEtiqueta()); 
                gc.etiqueta(c.getTrue()); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		tresEtiquetas c = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 
                gc.salto(c.getOut()); 
                gc.etiqueta(c.getFalse()); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sent_if ::= IF AP cond CP NT$0 sent NT$1 sent_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		tresEtiquetas c = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 gc.etiqueta(c.getOut()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent_else ::= ELSE sent 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_else",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_else",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              String RESULT =null;
 
                    RESULT = crearEtiqueta();
                    gc.etiqueta(RESULT); 
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		tresEtiquetas c = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                    c.setOut(RESULT);
                    gc.etiqueta(c.getTrue());
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent_while ::= WHILE NT$2 AP cond CP NT$3 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		tresEtiquetas c = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    gc.salto(c.getOut());
                    gc.etiqueta(c.getFalse()); 
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              String RESULT =null;
 
                    RESULT = crearEtiqueta();
                    gc.etiqueta(RESULT);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent_while ::= DO NT$4 sent WHILE AP cond CP PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		tresEtiquetas c = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    c.setOut(RESULT);
                    gc.etiqueta(c.getTrue()); 
                    gc.salto(c.getOut()); 
                    gc.etiqueta(c.getFalse());
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$5 ::= 
            {
              String RESULT =null;
 RESULT = crearEtiqueta(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$6 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 gc.etiqueta(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		tresEtiquetas c = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                c.setOut(RESULT);
                RESULT = crearEtiqueta(); 
                gc.etiqueta(RESULT); 
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		tresEtiquetas c = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 
                gc.salto(c.getOut());
                gc.etiqueta(c.getTrue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent_for ::= FOR NT$5 AP expFor PYC NT$6 cond PYC NT$7 expFor CP NT$8 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		tresEtiquetas c = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 gc.salto(RESULT);
                gc.etiqueta(c.getFalse()); 
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expFor ::= exp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expFor ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$9 ::= 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 cast = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= cast NT$9 exp 
            {
              Register RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Register) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= valores 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp MAS exp 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(cast != null) {
              if(cast.equals("int")) {
                Register aux = new Register("int", crearVariable());
                gc.variableCast(aux.ident, a.ident, "int");
                a = aux;
              }
              else if(cast.equals("float")) {
                Register aux1 = new Register("float", crearVariable());
                Register aux2 = new Register("float", crearVariable());
                gc.variableCast(aux1.ident, a.ident, "float");
                gc.variableCast(aux2.ident, b.ident, "float");
                a = aux1;
                b = aux2;
              }
              cast = null;
            }
            Register aux = castImplicito(a, b);
            if(aux != null) {
              if(a.tipo.equals("int")) a = aux;
              else b = aux;
            }
            RESULT = new Register(a.tipo, crearVariable());
            if(a.tipo.equals("float")) {
              gc.sumaReal(RESULT.ident, a.ident, b.ident);
            }
            else if(a.tipo.equals("int") && b.tipo.equals("int")) {
              gc.suma(RESULT.ident, a.ident, b.ident);
            }
            else {
              RESULT.tipo = "int";
              gc.sumaChar(RESULT.ident, a.ident, b.ident);
            }

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp MENOS exp 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(cast != null) {
              if(cast.equals("int")) {
                Register aux = new Register("int", crearVariable());
                gc.variableCast(aux.ident, a.ident, "int");
                a = aux;
              }
              else if(cast.equals("float")) {
                Register aux1 = new Register("float", crearVariable());
                Register aux2 = new Register("float", crearVariable());
                gc.variableCast(aux1.ident, a.ident, "float");
                gc.variableCast(aux2.ident, b.ident, "float");
                a = aux1;
                b = aux2;
              }
              cast = null;
            }
            Register aux = castImplicito(a, b);
            if(aux != null) {
              if(a.tipo.equals("int")) a = aux;
              else b = aux;
            }
            RESULT = new Register(a.tipo, crearVariable());
            if(a.tipo.equals("float")) {
              gc.restaReal(RESULT.ident, a.ident, b.ident);
            }
            else if(a.tipo.equals("int")) {
              gc.resta(RESULT.ident, a.ident, b.ident);
            }
            else {
              RESULT.tipo = "int";
              gc.restaChar(RESULT.ident, a.ident, b.ident);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp POR exp 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(cast != null) {
              if(cast.equals("int")) {
                Register aux = new Register("int", crearVariable());
                gc.variableCast(aux.ident, a.ident, "int");
                a = aux;
              }
              else if(cast.equals("float")) {
                Register aux1 = new Register("float", crearVariable());
                Register aux2 = new Register("float", crearVariable());
                gc.variableCast(aux1.ident, a.ident, "float");
                gc.variableCast(aux2.ident, b.ident, "float");
                a = aux1;
                b = aux2;
              }
              cast = null;
            }
            Register aux = castImplicito(a, b);
            if(aux != null) {
              if(a.tipo.equals("int")) a = aux;
              else b = aux;
            }
            RESULT = new Register(a.tipo, crearVariable());
            if(a.tipo.equals("float")) {
              gc.productoReal(RESULT.ident, a.ident, b.ident);
            }
            else {
              gc.producto(RESULT.ident, a.ident, b.ident);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp DIV exp 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(cast != null) {
              if(cast.equals("int")) {
                Register aux = new Register("int", crearVariable());
                gc.variableCast(aux.ident, a.ident, "int");
                a = aux;
              }
              else if(cast.equals("float")) {
                Register aux1 = new Register("float", crearVariable());
                Register aux2 = new Register("float", crearVariable());
                gc.variableCast(aux1.ident, a.ident, "float");
                gc.variableCast(aux2.ident, b.ident, "float");
                a = aux1;
                b = aux2;
              }
              cast = null;
            }
            Register aux = castImplicito(a, b);
            if(aux != null) {
              if(a.tipo.equals("int")) a = aux;
              else b = aux;
            }
            RESULT = new Register(a.tipo, crearVariable());
            if(a.tipo.equals("float")) {
              gc.divisionReal(RESULT.ident, a.ident, b.ident);
            }
            else {
              gc.division(RESULT.ident, a.ident, b.ident);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= AP exp CP 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if(cast != null) {
              RESULT = new Register(cast, crearVariable());
              gc.variableCast(RESULT.ident, a.ident, cast);
              cast = null;
            }
            else {
              RESULT = a;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= MENOS exp 
            {
              Register RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register e = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Register(e.tipo, crearVariable());
            gc.negativo(RESULT.ident, e.ident);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= BVAR IGUAL cast cond 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("HOLA");
            if(c != null) { cast = c; }
            RESULT = new Register("boolean", a);
            if(b.getOut() == null) {
              b.setOut(crearEtiqueta());
            }
            gc.etiqueta(b.getTrue());
            gc.variable(a, "1");
            gc.salto(b.getOut());
            gc.etiqueta(b.getFalse());
            gc.variable(a, "0");
            gc.etiqueta(b.getOut());
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= BVAR 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Register("boolean", a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$10 ::= 
            {
              Register RESULT =null;
System.out.println("HOLA");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= AP INT CP NT$10 cond 
            {
              Register RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Register) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          gc.etiqueta(b.getTrue());
          String aux = crearVariable();
          gc.variable(aux, "1");
          gc.etiqueta(b.getFalse());
          RESULT = new Register("int", aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= VAR IGUAL exp 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Array listaA = buscarArray(a);
            Array listaB = buscarArray(b.ident);
            if(listaA != null) {
              if(!listaA.tipo.equals(listaB.tipo)) {
                gc.errorHalt();
              }
              int tam = Integer.parseInt(listaA.tam);
              String variable1 = crearVariable();
              RESULT = new Register(listaA.tipo, a);
              for(int i = 0; i < tam; ++i) {
                gc.variable(variable1, b.ident + "[" + i + "]");
                gc.variable(a + "[" + i + "]", variable1);
              }
            }
            else {
              String tipoA = buscar(a);
              if(tipoA.equals(b.tipo)) {
                if(tipoA.equals("string")) {
                  String variable1 = crearVariable();
                  String variable2 = crearVariable();
                  String variable3 = crearVariable();
                  int j = 0;
                  for(int i = 1; i < b.ident.length()-1; ++i) {
                    if(b.ident.charAt(i) == '\\') {
                      i = i + 1;
                    }
                    int letra = (int) b.ident.charAt(i);
                    gc.variable(variable1 + "[" + j + "]", "" + letra);
                    j = j + 1;
                  }
                  gc.variable("$" + variable1 + "_length", "" + j);
                  gc.variable("$" + a + "_length", "0");
                  gc.variable(variable2, "0");
                  tresEtiquetas etiquetas = new tresEtiquetas();
                  gc.etiqueta(etiquetas.getTrue());
                  gc.ifMenor(variable2, "$" + variable1 + "_length", etiquetas.getFalse());
                  etiquetas.setOut(crearEtiqueta());
                  gc.salto(etiquetas.getOut()); 
                  gc.etiqueta(etiquetas.getFalse());
                  gc.variable(variable3, variable1 + "[" + variable2 + "]");         
                  gc.variable(a + "[$" + a + "_length]", variable3);
                  System.out.println("\t$" + a + "_length = " + "$" + a + "_length + 1;");
                  System.out.println("\t" + variable2 + " = " + variable2 + " + 1;");
                  gc.salto(etiquetas.getTrue());
                  gc.etiqueta(etiquetas.getOut());
                }
                else {
                  RESULT = new Register(tipoA, a);
                  gc.variable(RESULT.ident, b.ident);
                }
              }
              else if(tipoA.equals("float") && b.tipo.equals("int")) {
                RESULT = new Register("float", a);
                gc.variableCast(RESULT.ident, b.ident, "float");
              }
              else if(cast != null && 
                    (tipoA.equals("int") && b.tipo.equals("char") && cast.equals("int") || 
                      tipoA.equals("char") && b.tipo.equals("int") && cast.equals("char"))) {
                gc.variable(a, b.ident);
              }       
              else {
                gc.errorHalt();
              }
              cast = null;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= VAR 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            String tipoA = buscar(a);
            if(tipoA != null) {
              RESULT = new Register(tipoA, a);
            }
            else {
              Array valorA = buscarArray(a);
              if(valorA != null) {
                RESULT = new Register(valorA.tipo, a);
              }
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= VAR AC exp CC IGUAL exp 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register c = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Array aux = buscarArray(a);
            if(aux != null) {
              tresEtiquetas etiq = new tresEtiquetas();
              gc.ifMenor(b.ident, "0", etiq.getTrue());
              gc.ifMenor(aux.tam, b.ident, etiq.getTrue());
              gc.ifIgual(aux.tam, b.ident, etiq.getTrue());
              gc.salto(etiq.getFalse());
              gc.etiqueta(etiq.getTrue());
              System.out.println("\terror;\n\thalt;");
              gc.etiqueta(etiq.getFalse());
              RESULT = new Register(aux.tipo, a);
              gc.variable(RESULT.ident + "[" + b.ident + "]", c.ident);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= VAR AC exp CC 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Array aux = buscarArray(a);
            if(aux != null) {
              tresEtiquetas etiq = new tresEtiquetas();
              gc.ifMenor(b.ident, "0", etiq.getTrue());
              gc.ifMenor(aux.tam, b.ident, etiq.getTrue());
              gc.ifIgual(aux.tam, b.ident, etiq.getTrue());
              gc.salto(etiq.getFalse());
              gc.etiqueta(etiq.getTrue());
              System.out.println("\terror;\n\thalt;");
              gc.etiqueta(etiq.getFalse());
              RESULT = new Register(aux.tipo, crearVariable());
              gc.variable(RESULT.ident, a + "[" + b.ident + "]");
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= VAR IGUAL AL lista CL 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Register> b = (ArrayList<Register>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Array aux = buscarArray(a);
            if(aux != null) {
              String tipo = aux.tipo;
              RESULT = new Register(aux.tipo, a);
              String variable1 = crearVariable();
              int tam = Integer.parseInt(aux.tam);
              if(tam < b.size()) {
                gc.errorHalt();
              }
              for(int i = 0; i < b.size(); ++i) {
                Register element = b.get(i);
                if(!element.tipo.equals(tipo)) {
                  gc.errorHalt();
                }
                gc.variable(variable1 + "[" + i + "]", element.ident);
              }
              String variable2 = crearVariable();
              for(int i = 0; i < b.size(); ++i) {
                gc.variable(variable2, variable1 + "[" + i + "]");
                gc.variable(a + "[" + i + "]", variable2);
              }
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= VAR PUNTO LENGTH 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
          Array aux = buscarArray(a);
          if(aux != null) {
            RESULT = new Register("int", "$" + a + "_length");
          }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista ::= exp COMA lista 
            {
              ArrayList<Register> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Register> b = (ArrayList<Register>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = new ArrayList<Register>();
              RESULT.add(a);
              RESULT.addAll(b);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista ::= exp 
            {
              ArrayList<Register> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = new ArrayList<Register>(); 
              RESULT.add(a);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$11 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                      if(c == null) {
                        tipoAux = b; 
                        insertar(a, tipoAux); 
                        variableAux = a; 
                      }
                      else {
                        insertarArray(a, b, c);
                        tipoAux = "array";
                        variableAux = a;
                      }
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
                    if(c != null) { 
                      System.out.println("\t$" + a + "_length = " + c + ";"); 
                    } 
                    if(tipoAux.equals("boolean") && !asignado) {
                      gc.variable(a, "0");
                    }
                    else {
                      asignado = false;
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declare ::= tipo VAR array NT$11 asig NT$12 multiDeclare 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // array ::= AC exp CC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a.ident; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // array ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asig ::= IGUAL cond 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(tipoAux.equals("int")) {
              gc.variable(variableAux, numeroAux);
            }
            else {
              if(b.getOut() == null) {
                b.setOut(crearEtiqueta());
              }
              gc.etiqueta(b.getTrue());
              gc.variable(variableAux, "1");
              gc.salto(b.getOut());
              gc.etiqueta(b.getFalse());
              gc.variable(variableAux, "0");
              gc.etiqueta(b.getOut());
              asignado = true;
            }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asig ::= IGUAL AL lista CL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Register> b = (ArrayList<Register>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Array aux = buscarArray(variableAux);
            String tipo = aux.tipo;
            String variable1 = crearVariable();
            int tam = Integer.parseInt(aux.tam);
            if(tam < b.size()) {
              gc.errorHalt();
            }
            for(int i = 0; i < b.size(); ++i) {
              Register element = b.get(i);
              if(!element.tipo.equals(tipo)) {
                gc.errorHalt();
              }
              gc.variable(variable1 + "[" + i + "]", element.ident);
            }
            String variable2 = crearVariable();
            for(int i = 0; i < b.size(); ++i) {
              gc.variable(variable2, variable1 + "[" + i + "]");
              gc.variable(variableAux + "[" + i + "]", variable2);
            }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asig ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    insertar(a, tipoAux);
                    variableAux = a;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // multiDeclare ::= COMA VAR NT$13 asig multiDeclare 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiDeclare",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // multiDeclare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiDeclare",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo ::= INT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo ::= FLOAT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo ::= CHAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo ::= STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cast ::= AP FLOAT CP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cast ::= AP CHAR CP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cast ::= AP BOOLEAN CP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cast ::= AP NUMERO CP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cast ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valores ::= NUMERO 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Register("int", a); numeroAux = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valores ::= REAL 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Register("float", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valores ::= LETRA 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Register("char", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valores ::= UNICODE 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              a = a.replace("\\u", "");
              char unicode = (char) Integer.parseInt(a, 16);
              RESULT = new Register("char", "'" + unicode + "'"); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valores ::= PALABRA 
            {
              Register RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Register("string", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond ::= exp EQ exp 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new tresEtiquetas();
            gc.ifIgual(a.ident, b.ident, RESULT.getTrue()); 
            gc.salto(RESULT.getFalse()); 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond ::= VERDAD 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = new tresEtiquetas();
          if(a.equals("true")) {
            gc.salto(RESULT.getTrue());
          }
          else {
            gc.salto(RESULT.getFalse());
          }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond ::= exp 
            {
              tresEtiquetas RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String a = cast;
            if(b.tipo.equals("boolean")) {
              RESULT = new tresEtiquetas();
              gc.ifIgual("1", b.ident, RESULT.getTrue());
              gc.salto(RESULT.getFalse());
            }
            else if(tipoAux.equals("int")) {

            }
            else if(b.tipo.equals("int")) {
              if(a != null) {
                if(a.equals("boolean")) {
            
                }
                else {
                  gc.errorHalt();
                }
              }
              else {
                gc.errorHalt();
              }
            }
            else {
              gc.errorHalt();
            }
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond ::= exp NE exp 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new tresEtiquetas();
            gc.ifIgual(a.ident, b.ident, RESULT.getFalse()); 
            gc.salto(RESULT.getTrue()); 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cond ::= exp LT exp 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new tresEtiquetas();
            gc.ifMenor(a.ident, b.ident, RESULT.getTrue());
            gc.salto(RESULT.getFalse()); 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cond ::= exp LE exp 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new tresEtiquetas();
            gc.ifMenor(b.ident, a.ident, RESULT.getFalse()); 
            gc.salto(RESULT.getTrue()); 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cond ::= exp GT exp 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new tresEtiquetas();
            gc.ifMenor(b.ident, a.ident, RESULT.getTrue()); 
            gc.salto(RESULT.getFalse()); 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cond ::= exp GE exp 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Register a = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register b = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new tresEtiquetas();
            gc.ifMenor(a.ident, b.ident, RESULT.getFalse()); 
            gc.salto(RESULT.getTrue()); 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cond ::= AP cond CP 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		tresEtiquetas a = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond ::= NOT cond 
            {
              tresEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas c = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new tresEtiquetas(c.getFalse(), c.getTrue()); 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$14 ::= 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		tresEtiquetas a = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 gc.etiqueta(a.getTrue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cond ::= cond AND NT$14 cond 
            {
              tresEtiquetas RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (tresEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		tresEtiquetas a = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            gc.etiqueta(a.getFalse());
            gc.salto(b.getFalse()); 
            RESULT = b; 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$15 ::= 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		tresEtiquetas a = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 gc.etiqueta(a.getFalse()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cond ::= cond OR NT$15 cond 
            {
              tresEtiquetas RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (tresEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		tresEtiquetas a = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            gc.etiqueta(a.getTrue());
            gc.salto(b.getTrue()); 
            RESULT = b; 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$16 ::= 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		tresEtiquetas a = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 gc.etiqueta(a.getTrue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cond ::= cond IMPLICA NT$16 cond 
            {
              tresEtiquetas RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (tresEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		tresEtiquetas a = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            gc.etiqueta(b.getTrue());
            gc.salto(a.getFalse()); 
            b.setTrue(a.getFalse());
            RESULT = b; 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$17 ::= 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		tresEtiquetas a = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
            ++dentroImplica;
            if(dentroImplica == 2) {
              gc.etiqueta(a.getTrue()); 
              dimplica2 = crearVariable();
              gc.variable(dimplica2, "1"); 
              gc.etiqueta(a.getFalse()); 
            }
            else {
              gc.etiqueta(a.getTrue()); 
              dimplica = crearVariable(); 
              gc.variable(dimplica, "1"); 
              gc.etiqueta(a.getFalse()); 
            }
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cond ::= cond DIMPLICA NT$17 cond 
            {
              tresEtiquetas RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (tresEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		tresEtiquetas a = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(dentroImplica == 2) {
              gc.etiqueta(b.getTrue());
              tresEtiquetas aux = new tresEtiquetas();
              gc.ifIgual(dimplica2, "1", aux.getTrue());
              gc.salto(aux.getFalse()); 
              gc.etiqueta(b.getFalse());
              gc.ifIgual(dimplica2, "1", aux.getFalse());
              gc.salto(aux.getTrue());
              b.setTrue(aux.getTrue());
              b.setFalse(aux.getFalse());
              RESULT = b; 
              --dentroImplica;
            }
            else {
              gc.etiqueta(b.getTrue());
              tresEtiquetas aux = new tresEtiquetas();
              gc.ifIgual(dimplica, "1", aux.getTrue());
              gc.salto(aux.getFalse()); 
              gc.etiqueta(b.getFalse());
              gc.ifIgual(dimplica, "1", aux.getFalse());
              gc.salto(aux.getTrue());
              b.setTrue(aux.getTrue());
              b.setFalse(aux.getFalse());
              RESULT = b; 
              --dentroImplica;
            }
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$18 ::= 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
            gc.variable(a, "0"); 
            RESULT = new tresEtiquetas(); 
            gc.etiqueta(RESULT.getTrue()); 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cond ::= FORALL BVAR COMA NT$18 cond 
            {
              tresEtiquetas RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (tresEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            gc.etiqueta(b.getTrue());
            gc.ifIgual("1", a, RESULT.getFalse());
            gc.variable(a, "1");
            gc.salto(RESULT.getTrue());
            String aux = RESULT.getFalse();
            RESULT = b;
            RESULT.setTrue(aux);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$19 ::= 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
            gc.variable(a, "0"); 
            RESULT = new tresEtiquetas(); 
            gc.etiqueta(RESULT.getTrue()); 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cond ::= EXISTS BVAR COMA NT$19 cond 
            {
              tresEtiquetas RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (tresEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            gc.etiqueta(b.getFalse());
            gc.ifIgual("1", a, RESULT.getFalse());
            gc.variable(a, "1");
            gc.salto(RESULT.getTrue());
            String aux = b.getTrue();
            b.setFalse(RESULT.getFalse());
            RESULT = b;
            RESULT.setTrue(aux);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$20 ::= 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int num3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String num3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
            gc.variable(a, num1); 
            RESULT = new tresEtiquetas(); 
            gc.etiqueta(RESULT.getTrue()); 
            gc.ifMenor(num2, a, RESULT.getFalse());
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cond ::= FORALL VAR FROM NUMERO TO NUMERO step COMA NT$20 cond 
            {
              tresEtiquetas RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (tresEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int num3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int num3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String num3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            gc.etiqueta(b.getTrue());
            gc.variable(a, a + " + " + (num3 == null ? 1 : num3));
            gc.salto(RESULT.getTrue());
            String aux = RESULT.getFalse();
            RESULT = b;
            RESULT.setTrue(aux);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$21 ::= 
            {
              tresEtiquetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int num3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String num3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
            gc.variable(a, num1); 
            RESULT = new tresEtiquetas(); 
            gc.etiqueta(RESULT.getTrue()); 
            gc.ifMenor(num2, a, RESULT.getFalse());
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cond ::= EXISTS VAR FROM NUMERO TO NUMERO step COMA NT$21 cond 
            {
              tresEtiquetas RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (tresEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int num3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int num3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String num3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tresEtiquetas b = (tresEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            gc.etiqueta(b.getFalse());
            gc.variable(a, a + " + " + (num3 == null ? 1 : num3));
            gc.salto(RESULT.getTrue());
            String aux = b.getTrue();
            b.setFalse(RESULT.getFalse());
            RESULT = b;
            RESULT.setTrue(aux);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // step ::= STEP NUMERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("step",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // step ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("step",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
